#!/bin/bash

# Parallel Processing - Task 5
# Fetches Pokemon data in parallel using background processes

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
MAX_RETRIES=3

# Function to handle script interruption
cleanup() {
    echo "üõë Interrupt received. Cleaning up background jobs..."
    jobs -p | xargs -r kill 2>/dev/null || true
    exit 1
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Function to fetch pokemon data with retry logic (background process)
fetch_pokemon_parallel() {
    local pokemon_name=$1
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local retries=0
    
    echo "Starting fetch for $pokemon_name (PID: $$)"
    
    while [ $retries -lt $MAX_RETRIES ]; do
        if curl -s "${API_BASE_URL}/${pokemon_name}" -o "$output_file" 2>/dev/null; then
            # Validate JSON
            if jq empty "$output_file" 2>/dev/null; then
                echo "‚úÖ Completed fetch for $pokemon_name"
                return 0
            else
                echo "Invalid JSON received for $pokemon_name, attempt $((retries + 1))"
                rm -f "$output_file"
            fi
        else
            echo "Request failed for $pokemon_name, attempt $((retries + 1))"
        fi
        
        retries=$((retries + 1))
        if [ $retries -lt $MAX_RETRIES ]; then
            sleep 1
        fi
    done
    
    # Log error after max retries
    echo "‚ùå Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts"
    echo "$(date): Failed to fetch $pokemon_name after $MAX_RETRIES attempts" >> "$ERROR_FILE"
    return 1
}

echo "üöÄ Starting parallel fetch for ${#POKEMON_LIST[@]} Pokemon..."

# Array to store background process PIDs
pids=()

# Start background processes for each Pokemon
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_parallel "$pokemon" &
    pids+=($!)
done

echo "‚è≥ Waiting for all background processes to complete..."

# Monitor jobs and wait for completion
while [ $(jobs -r | wc -l) -gt 0 ]; do
    echo "Active jobs: $(jobs -r | wc -l)"
    sleep 1
done

# Wait for all background processes to finish
for pid in "${pids[@]}"; do
    wait "$pid"
done

# Clean up any remaining jobs
if [ $(jobs | wc -l) -gt 0 ]; then
    echo "Cleaning up remaining jobs..."
    jobs -p | xargs -r kill 2>/dev/null || true
fi

echo "‚úÖ All parallel processes completed!"

# Display summary
echo
echo "üìä Summary:"
successful=0
failed=0

for pokemon in "${POKEMON_LIST[@]}"; do
    if [ -f "$OUTPUT_DIR/${pokemon}.json" ]; then
        echo "‚úÖ $pokemon - Success"
        successful=$((successful + 1))
    else
        echo "‚ùå $pokemon - Failed"
        failed=$((failed + 1))
    fi
done

echo
echo "Total: ${#POKEMON_LIST[@]} Pokemon"
echo "Successful: $successful"
echo "Failed: $failed"