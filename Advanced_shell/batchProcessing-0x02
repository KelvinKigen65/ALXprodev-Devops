#!/bin/bash

# Batch Processing - Task 2
# Fetches data for multiple Pokemon with rate limiting and error handling

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
MAX_RETRIES=3
DELAY=1

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Function to fetch pokemon data with retry logic
fetch_pokemon() {
    local pokemon_name=$1
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local retries=0
    
    echo "Fetching data for $pokemon_name..."
    
    while [ $retries -lt $MAX_RETRIES ]; do
        if curl -s "${API_BASE_URL}/${pokemon_name}" -o "$output_file"; then
            # Validate JSON
            if jq empty "$output_file" 2>/dev/null; then
                echo "Saved data to $output_file ✅"
                return 0
            else
                echo "Invalid JSON received for $pokemon_name, attempt $((retries + 1))"
                rm -f "$output_file"
            fi
        else
            echo "Request failed for $pokemon_name, attempt $((retries + 1))"
        fi
        
        retries=$((retries + 1))
        if [ $retries -lt $MAX_RETRIES ]; then
            sleep $DELAY
        fi
    done
    
    # Log error after max retries
    echo "❌ Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts"
    echo "$(date): Failed to fetch $pokemon_name after $MAX_RETRIES attempts" >> "$ERROR_FILE"
    return 1
}

# Fetch data for each Pokemon
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon"
    # Add delay between requests to handle rate limiting
    sleep $DELAY
done

echo "✅ Batch processing completed!"